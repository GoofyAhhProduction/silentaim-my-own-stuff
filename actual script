-- this is the actual script that ure meant to execute for the lock / silent aim

local Aiming = loadstring(game:HttpGet("https://raw.githubusercontent.com/zetaV1/silentaim-my-own-stuff/main/source%20and%20config"))()
Aiming.TeamCheck(false)

local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CurrentCamera = Workspace.CurrentCamera

local DaHoodSettings = {
    SilentAim = true,
    Prediction = 0.157,
    
}
getgenv().DaHoodSettings = DaHoodSettings

function Aiming.Check()
    if not (Aiming.Enabled == true and Aiming.Selected ~= LocalPlayer and Aiming.SelectedPart ~= nil) then
        return false
    end

    local Character = Aiming.Character(Aiming.Selected)
    local KOd = Character:WaitForChild("BodyEffects")["K.O"].Value
    local Grabbed = Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil

    if (KOd or Grabbed) then
        return false
    end

    return true
end

-- //
function DaHoodSettings.ApplyPredictionFormula(SelectedPart, Velocity)
    return SelectedPart.CFrame + (Velocity * DaHoodSettings.Prediction)
end

-- // Hook
local __index
__index = hookmetamethod(game, "__index", function(t, k)
    -- // Check if it's trying to get the mouse's hit or target and see if we can use it
    if (t:IsA("Mouse") and (k:lower() == "hit" or k:lower() == "target") and Aiming.Check() and DaHoodSettings.SilentAim) then
        -- // Variables
        local selectedPart = Aiming.SelectedPart
        local hit = DaHoodSettings.ApplyPredictionFormula(selectedPart, SelectedPart.Velocity * Vector3.new(1, 0.1, 1))

        -- // Return the modified value
        return (k:lower() == "hit" and hit or selectedPart)
    end

    -- // Return
    return __index(t, k)
end)


RunService:BindToRenderStep("AimLock", 0, function()
    if (DaHoodSettings.AimLock and Aiming.Check() and UserInputService:IsKeyDown(DaHoodSettings.AimLockKeybind)) then
        local SelectedPart = Aiming.SelectedPart

        local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * DaHoodSettings.Prediction)

        CurrentCamera.CFrame = CFrame.lookAt(CurrentCamera.CFrame.Position, Hit.Position)
    end
    end)
